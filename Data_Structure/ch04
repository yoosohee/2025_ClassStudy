{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPjMHqCUP8HAFkZXYrO+UU6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yoosohee/2025_ClassStudy/blob/main/Data_Structure/ch04\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "두 개의 숫자를 입력받아서 두 값을 더한 결과를 출력하는 프로그램"
      ],
      "metadata": {
        "id": "ySChwoHl_qOr"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "KWfREYNT9CY8"
      },
      "outputs": [],
      "source": [
        "def hap (a,b): # 매개변수로 a, b\n",
        "  hap = a+b\n",
        "  return hap # 함수 정의"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num1 = int(input(\"숫자 입력: \"))\n",
        "num2 = int(input(\"숫자 입력: \"))\n",
        "result = num1+num2\n",
        "print (\"두 수의 합은: \", result) # 함수 실행"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yb9Q8VXhAJpU",
        "outputId": "d9aeba20-7d96-4588-ef3c-338a112f9766"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "숫자 입력: 43\n",
            "숫자 입력: 455\n",
            "두 수의 합은:  498\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def calc (n1,n2,op):\n",
        "  if op=='+':\n",
        "    result=n1+n2\n",
        "  elif op=='-':\n",
        "    result=n1-n2\n",
        "  elif op=='*':\n",
        "    result=n1*n2\n",
        "  else:\n",
        "    result=n1/n2\n",
        "  return result\n",
        "\n",
        "num1 = int(input(\"숫자 입력: \"))\n",
        "num2 = int(input(\"숫자 입력: \"))\n",
        "op = (input(\"계산을 입력하세요(+, -, *, /): \"))\n",
        "result = calc (num1, num2, op)\n",
        "print (result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4zKDYLrHArYt",
        "outputId": "2e329b6f-46ef-48e4-8394-845355d6c4c5"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "숫자 입력: 5\n",
            "숫자 입력: 6\n",
            "계산을 입력하세요(+, -, *, /): -\n",
            "-1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**로또번호 추첨기**\n",
        "\n",
        "1~45까지의 숫자를 추출해 랜덤으로 6개를 출력"
      ],
      "metadata": {
        "id": "HWXOr3zFE_Da"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "def lotto():\n",
        "  lotto_list = list(range(1,46))\n",
        "  lotto = random.sample(lotto_list, 6)\n",
        "  lotto.sort() # 정렬\n",
        "  return lotto\n",
        "\n",
        "lotto()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zeZs0FBBBrtE",
        "outputId": "f0c712d5-6bca-463e-bb37-18cf794742a5"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[8, 11, 16, 29, 36, 43]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "지역변수와 전역변수 이름이 같은 경우 지역변수가 우선\n",
        "(전역변수 우선 사용 시 global 예약어)"
      ],
      "metadata": {
        "id": "uvk0jqkzLf6L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**비밀번호의 규칙 실습**\n",
        "1) 8글자 이상\n",
        "2) 영문자 및 숫자만 가능 (기호, 한글 등은 불가능)"
      ],
      "metadata": {
        "id": "l89DkZMXL_58"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 잘못 작성한 코드 -> 오답하깅!\n",
        "\n",
        "pw = input(\"새로운 비밀번호를 입력하세요: \")\n",
        "a = pw.isalnum()\n",
        "def checkpw(pw):\n",
        "  if a == True and len(pw>=8):\n",
        "    result = print(\"Good! 비밀번호가 올바르게 생성되었어요!\")\n",
        "  else:\n",
        "    result = print(\"오류! 비밀번호가 규칙에 맞지 않습니다.\")\n",
        "  return result\n",
        "\n",
        "checkpw(pw)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        },
        "id": "TgGHmxylGDu8",
        "outputId": "50467129-8bf6-4d04-f33d-5922d64beab4"
      },
      "execution_count": 18,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "새로운 비밀번호를 입력하세요: 39242dfds\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "'>=' not supported between instances of 'str' and 'int'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-3761172081.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mcheckpw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/tmp/ipython-input-3761172081.py\u001b[0m in \u001b[0;36mcheckpw\u001b[0;34m(pw)\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpw\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misalnum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcheckpw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m   \u001b[0;32mif\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;32mTrue\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpw\u001b[0m\u001b[0;34m>=\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Good! 비밀번호가 올바르게 생성되었어요!\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: '>=' not supported between instances of 'str' and 'int'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def checkpw(pw):\n",
        "  if len(pw)>=8 and pw.isalnum():\n",
        "    print(\"Good! 비밀번호가 올바르게 생성되었어요!\")\n",
        "  else:\n",
        "    print(\"오류! 비밀번호가 규칙에 맞지 않습니다.\")\n",
        "\n",
        "password = input(\"새로운 비밀번호를 입력하세요: \")\n",
        "checkpw(password)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d7Qdl_yzNtFs",
        "outputId": "0de87e27-4e5d-4e34-ca6f-af826a44992f"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "새로운 비밀번호를 입력하세요: erw9230\n",
            "오류! 비밀번호가 규칙에 맞지 않습니다.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "리스트"
      ],
      "metadata": {
        "id": "Jt66ePbcTYHk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = []\n",
        "b = [1,2,3,4]\n",
        "c = [\"hi\",\"hello\"]\n",
        "\n",
        "print(b[2])\n",
        "print(c[1])\n",
        "\n",
        "# b에서 3만 출력\n",
        "# c에서 \"hello\"만 출력"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tR1yqcHAO4F0",
        "outputId": "c26bedd0-d122-495d-a118-f882af90b70b"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n",
            "hello\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "b = [1,2,3,4]\n",
        "print(b[1:3])\n",
        "print(len(b))\n",
        "\n",
        "# b에서 2, 3만 출력\n",
        "# b의 길이 출력"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DzTsQduCT20W",
        "outputId": "da300322-3c04-496c-f797-cca93657007d"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 3]\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 합계 구하기\n",
        "\n",
        "sum = 0\n",
        "b = [1,2,3,4,5]\n",
        "for i in range(len(b)):\n",
        "  sum = sum+b[i]\n",
        "\n",
        "print (\"합계는\", sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vr-_CaqqUohO",
        "outputId": "5d280434-b013-4b89-ad2d-6b767e729a96"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "합계는 15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "e = [random.randint(0,10) for i in range(10)]\n",
        "print(e)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FTYrgmQAZLOZ",
        "outputId": "4efb3197-c177-4049-a1ab-82a7cc4aac80"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4, 2, 4, 9, 7, 7, 5, 9, 2, 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = [2,3,4,5,6]\n",
        "a.append(7)\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EhP4-evXaHDX",
        "outputId": "598c30f4-6481-4345-8e23-de07de629b5c"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 3, 4, 5, 6, 7]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.pop()\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IaovWSF_a6NP",
        "outputId": "8cf87375-8a14-4b06-d29f-30219873efbe"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 3, 4, 5, 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.insert(3,5)\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xc0618yma-wn",
        "outputId": "1b8a28c1-2ab5-4ed0-c790-1f47cb2f5c52"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2, 3, 4, 5, 5, 6]"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a.pop(5)\n",
        "a.pop(4)\n",
        "\n",
        "print(a)\n",
        "a.insert(0,1)\n",
        "print(a)\n",
        "\n",
        "# a = [1,2,3,4,5]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zNFaH0vibEIg",
        "outputId": "07014a4d-9226-4c59-c686-0de1b0207667"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 3, 4, 5]\n",
            "[1, 2, 3, 4, 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AWzFhSAQbUQo",
        "outputId": "572cbdeb-6efc-4538-b5b4-dd60f81a968f"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_mIZX6RIbyhf"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}