{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNCtB0uT0DV8IbPgHWBbWk8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yoosohee/2025_ClassStudy/blob/main/Machine_Learning/review3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "_X82zEYdQwqf"
      },
      "outputs": [],
      "source": [
        "# 그리드 월드 기본 환경 및 유틸리티\n",
        "\n",
        "import random\n",
        "import time\n",
        "\n",
        "# -------------------------------\n",
        "# |(0,0)|(0,1)|(0,2)|(0,3)|(0,4)|\n",
        "# |(1,0)|(1,1)|(1,2)|(1,3)|(1,4)|\n",
        "# |(2,0)|(2,1)|(2,2)|(2,3)|(2,4)|\n",
        "# |(3,0)|(3,1)|(3,2)|(3,3)|(3,4)|\n",
        "# |(4,0)|(4,1)|(4,2)|(4,3)|(4,4)|\n",
        "# -------------------------------\n",
        "\n",
        "\n",
        "class GridWorld():\n",
        "    def __init__(\n",
        "            self,\n",
        "            height=5, width=5,        # 격자판의 크기\n",
        "            start_state=(0, 0),       # 시작 상태\n",
        "            terminal_states=[(4, 4)], # 종료 상태\n",
        "            transition_reward=0.0,    # 일반적인 상태 전이 보상\n",
        "            terminal_reward=1.0,      # 종료 상태로 이동하는 행동 수행\n",
        "                                      # 때 받는 보상\n",
        "            outward_reward=0.0,       # 미로 바깥으로 이동하는 행동 수행\n",
        "                                      # 때 받는 보상\n",
        "            warm_hole_states=None     # 윔홀 정의\n",
        "    ):\n",
        "        self.__version__ = \"0.0.1\"\n",
        "\n",
        "        # 그리드월드의 세로 길이\n",
        "        self.HEIGHT = height\n",
        "\n",
        "        # 그리드월드의 가로 길이\n",
        "        self.WIDTH = width\n",
        "\n",
        "        self.STATES = []\n",
        "        self.num_states = self.WIDTH * self.HEIGHT\n",
        "\n",
        "        for i in range(self.HEIGHT):\n",
        "            for j in range(self.WIDTH):\n",
        "                self.STATES.append((i, j))\n",
        "\n",
        "        # 터미널 상태를 상태 집합에서 제거\n",
        "        for state in terminal_states:\n",
        "            self.STATES.remove(state)\n",
        "\n",
        "        self.current_state = None\n",
        "\n",
        "        # 모든 가능한 행동\n",
        "        self.ACTION_UP = 0\n",
        "        self.ACTION_DOWN = 1\n",
        "        self.ACTION_LEFT = 2\n",
        "        self.ACTION_RIGHT = 3\n",
        "\n",
        "        self.ACTIONS = [\n",
        "            self.ACTION_UP,\n",
        "            self.ACTION_DOWN,\n",
        "            self.ACTION_LEFT,\n",
        "            self.ACTION_RIGHT\n",
        "        ]\n",
        "\n",
        "        # UP, DOWN, LEFT, RIGHT\n",
        "        self.ACTION_SYMBOLS = [\"↑\", \"↓\", \"←\", \"→\"]\n",
        "\n",
        "        self.NUM_ACTIONS = len(self.ACTIONS)\n",
        "\n",
        "        # 시작 상태 위치\n",
        "        self.START_STATE = start_state\n",
        "\n",
        "        # 종료 상태 위치\n",
        "        self.TERMINAL_STATES = terminal_states\n",
        "\n",
        "        # 웜홀 상태 위치\n",
        "        self.WARM_HOLE_STATES = warm_hole_states\n",
        "\n",
        "        # 일반 상태 전이 수행에 대한 보상 값\n",
        "        self.transition_reward = transition_reward\n",
        "\n",
        "        # 종료 상태 전이 수행에 대한 보상 값\n",
        "        self.terminal_reward = terminal_reward\n",
        "\n",
        "        # 그리드월드 바깥으로 상태 전이 수행해 대한 보상 값\n",
        "        self.outward_reward = outward_reward\n",
        "\n",
        "\n",
        "    # 환경 초기화 작업: 에이전트의 현재 위치를 START_STATE로 설정\n",
        "    def reset(self):\n",
        "        self.current_state = self.START_STATE\n",
        "        return self.current_state\n",
        "\n",
        "    # 에이전트의 현재 위치를 state로 설정\n",
        "    def moveto(self, state):\n",
        "        self.current_state = state\n",
        "\n",
        "    # 주어진 state 상태가 웜홀 상태이면 True 반환하고, 아니면 False 반환\n",
        "    def is_warm_hole_state(self, state):\n",
        "        i, j = state\n",
        "\n",
        "        if self.WARM_HOLE_STATES is not None \\\n",
        "            and len(self.WARM_HOLE_STATES) > 0:\n",
        "            for warm_hole_info in self.WARM_HOLE_STATES:\n",
        "                warm_hole_state = warm_hole_info[0]\n",
        "                if i == warm_hole_state[0] and j == warm_hole_state[1]:\n",
        "                    return True\n",
        "        return False\n",
        "\n",
        "    # 주어진 웜홀 상태 state에 대하여 미리 정해져 있는 다음 상태 반환\n",
        "    def get_next_state_warm_hole(self, state):\n",
        "        i, j = state\n",
        "        next_state = None\n",
        "\n",
        "        for warm_hole_info in self.WARM_HOLE_STATES:\n",
        "            warm_hole_state = warm_hole_info[0]\n",
        "            warm_hole_prime_state = warm_hole_info[1]\n",
        "\n",
        "            if i == warm_hole_state[0] and j == warm_hole_state[1]:\n",
        "                next_state = warm_hole_prime_state\n",
        "                break\n",
        "        return next_state\n",
        "\n",
        "    # 주어진 웜홀 상태 state에 대하여 미리 정해져 있는 보상 반환\n",
        "    def get_reward_warm_hole(self, state):\n",
        "        i, j = state\n",
        "        reward = None\n",
        "\n",
        "        for warm_hole_info in self.WARM_HOLE_STATES:\n",
        "            warm_hole_state = warm_hole_info[0]\n",
        "            warm_hole_reward = warm_hole_info[2]\n",
        "\n",
        "            if i == warm_hole_state[0] and j == warm_hole_state[1]:\n",
        "                reward = warm_hole_reward\n",
        "                break\n",
        "\n",
        "        return reward\n",
        "\n",
        "    # 주어진 상태 state와 행동 action에 대한 다음 상태 반환\n",
        "    def get_next_state(self, state, action):\n",
        "        i, j = state\n",
        "\n",
        "        # 주어진 상태가 웜홀 상태이면 미리 정해진 다음 상태를 반환\n",
        "        if self.is_warm_hole_state(state):\n",
        "            next_state = self.get_next_state_warm_hole(state)\n",
        "            next_i = next_state[0]\n",
        "            next_j = next_state[1]\n",
        "        # 주어진 상태가 종료 상태이면 현재 상태를\n",
        "        # 다음 상태로 설정하여 반환\n",
        "        elif (i, j) in self.TERMINAL_STATES:\n",
        "            next_i = i\n",
        "            next_j = j\n",
        "        # 주어진 행동 수행에 따른 다음 상태 반환\n",
        "        # 주어진 행동에 의하여 그리드월드 밖으로 이동하는 경우\n",
        "        # 제자리에 멈춤\n",
        "        else:\n",
        "            if action == self.ACTION_UP:\n",
        "                next_i = max(i - 1, 0)\n",
        "                next_j = j\n",
        "            elif action == self.ACTION_DOWN:\n",
        "                next_i = min(i + 1, self.HEIGHT - 1)\n",
        "                next_j = j\n",
        "            elif action == self.ACTION_LEFT:\n",
        "                next_i = i\n",
        "                next_j = max(j - 1, 0)\n",
        "            elif action == self.ACTION_RIGHT:\n",
        "                next_i = i\n",
        "                next_j = min(j + 1, self.WIDTH - 1)\n",
        "            else:\n",
        "                raise ValueError()\n",
        "\n",
        "        return next_i, next_j\n",
        "\n",
        "    # 주어진 상태 state에서 다음 상태 next_state로 이동할 경우\n",
        "    # 얻는 보상 반환\n",
        "    def get_reward(self, state, next_state):\n",
        "        i, j = state\n",
        "        next_i, next_j = next_state\n",
        "\n",
        "        # 주어진 상태가 웜홀 상태이면 미리 정해진 보상 반환\n",
        "        if self.is_warm_hole_state(state):\n",
        "            reward = self.get_reward_warm_hole(state)\n",
        "        else:\n",
        "            # 다음 상태가 종료 상태이면 미리 정해진 보상 반환\n",
        "            if (next_i, next_j) in self.TERMINAL_STATES:\n",
        "                reward = self.terminal_reward\n",
        "            else:\n",
        "                # 주어진 행동에 의하여 그리드월드 밖으로 이동하는 경우\n",
        "                # 제자리에 멈추면서 미리 정해진 보상 반환\n",
        "                if i == next_i and j == next_j:\n",
        "                    reward = self.outward_reward\n",
        "                # 일반적인 상태 전이인 경우 미리 정해진\n",
        "                # 일반 전이 보상 반환\n",
        "                else:\n",
        "                    reward = self.transition_reward\n",
        "\n",
        "        return reward\n",
        "\n",
        "    # 주어진 상태 state에서 행동 action을 수행할 때 전이되는\n",
        "    # 다음 상태 및 보상과 이에 대한 전이 확률을 반환\n",
        "    def get_state_action_probability(self, state, action):\n",
        "        next_i, next_j = self.get_next_state(state, action)\n",
        "\n",
        "        reward = self.get_reward(state, (next_i, next_j))\n",
        "        transition_prob = 1.0\n",
        "\n",
        "        return (next_i, next_j), reward, transition_prob\n",
        "\n",
        "    # 에이전트가 행동 action을 선택하여 환경에 적용할 때 호출하는 함수\n",
        "    # 행동 action이 수행된 이후 전이된 다음 상태, 보상, 종료 유무 반환\n",
        "    def step(self, action):\n",
        "        next_i, next_j = self.get_next_state(\n",
        "            state=self.current_state, action=action\n",
        "        )\n",
        "\n",
        "        reward = self.get_reward(self.current_state, (next_i, next_j))\n",
        "\n",
        "        self.current_state = (next_i, next_j)\n",
        "\n",
        "        if self.current_state in self.TERMINAL_STATES:\n",
        "            done = True\n",
        "        else:\n",
        "            done = False\n",
        "\n",
        "        return (next_i, next_j), reward, done, None\n",
        "\n",
        "    # 그리드월드 환경을 화면에 출력\n",
        "    def render(self, mode='human'):\n",
        "        print(self.__str__())\n",
        "\n",
        "    # 임의의 행동을 선택하여 반환\n",
        "    def get_random_action(self):\n",
        "        return random.choice(self.ACTIONS)\n",
        "\n",
        "    # 그리드월드 환경을 문자열로 변환\n",
        "    def __str__(self):\n",
        "        gridworld_str = \"\"\n",
        "        for i in range(self.HEIGHT):\n",
        "            gridworld_str += \"-------------------------------\\n\"\n",
        "\n",
        "            for j in range(self.WIDTH):\n",
        "                if self.current_state[0] == i and self.current_state[1] == j:\n",
        "                    gridworld_str += \"|  {0}  \".format(\"*\")\n",
        "                elif (i, j) == self.START_STATE:\n",
        "                    gridworld_str += \"|  {0}  \".format(\"S\")\n",
        "                elif (i, j) in self.TERMINAL_STATES:\n",
        "                    gridworld_str += \"|  {0}  \".format(\"G\")\n",
        "                elif self.WARM_HOLE_STATES and \\\n",
        "                     (i, j) in [state[0] for state in self.WARM_HOLE_STATES]:\n",
        "                    gridworld_str += \"|  {0}  \".format(\"W\")\n",
        "                else:\n",
        "                    gridworld_str += \"|     \"\n",
        "            gridworld_str += \"|\\n\"\n",
        "\n",
        "            for j in range(self.WIDTH):\n",
        "                gridworld_str += \"|({0},{1})\".format(i, j)\n",
        "\n",
        "            gridworld_str += \"|\\n\"\n",
        "\n",
        "        gridworld_str += \"-------------------------------\\n\"\n",
        "        return gridworld_str"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.table import Table\n",
        "\n",
        "# 학습 이후의 가치함수를 표 형태로 그리는 함수\n",
        "def draw_grid_world_state_values_image(state_values, GRID_HEIGHT, GRID_WIDTH):\n",
        "\n",
        "    # 축 표시 제거, 크기 조절 등 이미지 그리기를 위한 설정\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.set_axis_off()\n",
        "    table = Table(ax, bbox=[0, 0, 1, 1])\n",
        "\n",
        "    nrows, ncols = GRID_HEIGHT, GRID_WIDTH\n",
        "    width, height = 1.0 / ncols, 1.0 / nrows\n",
        "\n",
        "    # 렌더링 할 이미지에 표 셀과 해당 값 추가\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            table.add_cell(\n",
        "                i, j, width, height,\n",
        "                text=np.round(state_values[i][j], decimals=2),\n",
        "                loc='center', facecolor='white'\n",
        "            )\n",
        "\n",
        "    # 행, 열 라벨 추가\n",
        "    for i in range(len(state_values)):\n",
        "        table.add_cell(\n",
        "            i, -1, width, height,\n",
        "            text=i+1,\n",
        "            loc='right', edgecolor='none', facecolor='none'\n",
        "        )\n",
        "        table.add_cell(\n",
        "            -1, i, width, height/2,\n",
        "            text=i+1,\n",
        "            loc='center', edgecolor='none', facecolor='none'\n",
        "        )\n",
        "\n",
        "    for key, cell in table.get_celld().items():\n",
        "         cell.get_text().set_fontsize(20)\n",
        "\n",
        "    ax.add_table(table)\n",
        "\n",
        "    plt.show()\n",
        "    plt.close()"
      ],
      "metadata": {
        "id": "gGHkRKMxRk5k"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import os\n",
        "\n",
        "GRID_HEIGHT = 5\n",
        "GRID_WIDTH = 5\n",
        "\n",
        "DISCOUNT_RATE = 0.9         # 감쇄율\n",
        "\n",
        "\n",
        "# 그리드 월드에서 상태 가치 산출\n",
        "def calculate_grid_world_state_values(env):\n",
        "    ACTION_PROBABILITY = 0.25\n",
        "    value_function = np.zeros(shape=(GRID_HEIGHT, GRID_WIDTH))\n",
        "\n",
        "    # 가치 함수의 값들이 수렴할 때까지 반복\n",
        "    while True:\n",
        "        # value_function과 동일한 형태를 가지면서 값은\n",
        "        # 모두 0인 배열을 new_value_function에 저장\n",
        "        new_value_function = np.zeros_like(value_function)\n",
        "\n",
        "        for i in range(GRID_HEIGHT):\n",
        "            for j in range(GRID_WIDTH):\n",
        "                values = []\n",
        "                # 주어진 상태에서 가능한 모든 행동들의 결과로\n",
        "                # 다음 상태들을 갱신\n",
        "                for action in env.ACTIONS:\n",
        "                    (next_i, next_j), reward, transition_prob \\\n",
        "                    = env.get_state_action_probability(\n",
        "                        state=(i, j),\n",
        "                        action=action\n",
        "                    )\n",
        "\n",
        "                    # Bellman-Equation, 벨만 방정식 적용\n",
        "                    values.append(\n",
        "                        ACTION_PROBABILITY * transition_prob * \\\n",
        "                        (reward + DISCOUNT_RATE * \\\n",
        "                         value_function[next_i, next_j])\n",
        "                    )\n",
        "\n",
        "                new_value_function[i, j] = np.sum(values)\n",
        "\n",
        "        # 가치 함수 수렴 여부 판단 (0.0001 == 1e-4)\n",
        "        if np.sum(np.abs(value_function - new_value_function)) < 1e-4:\n",
        "            break\n",
        "\n",
        "        # 가치 함수 갱신\n",
        "        value_function = new_value_function\n",
        "\n",
        "    return new_value_function\n",
        "\n",
        "A_POSITION = (0, 1)         # 임의로 지정한 특별한 상태 A 좌표\n",
        "B_POSITION = (0, 3)         # 임의로 지정한 특별한 상태 B 좌표\n",
        "\n",
        "A_PRIME_POSITION = (2,2)   # 상태 A에서 행동시 도착할 위치 좌표\n",
        "B_PRIME_POSITION = (1,2)   # 상태 B에서 행동시 도착할 위치 좌표\n",
        "\n",
        "def main():\n",
        "    # 5x5 맵 생성\n",
        "    env = GridWorld(\n",
        "        height=GRID_HEIGHT,\n",
        "        width=GRID_WIDTH,\n",
        "        start_state=None,\n",
        "        terminal_states=[],\n",
        "        transition_reward=0.0,\n",
        "        outward_reward=-1.0,\n",
        "        warm_hole_states=[\n",
        "            (A_POSITION, A_PRIME_POSITION, 10.0),\n",
        "            (B_POSITION, B_PRIME_POSITION, 5.0)\n",
        "        ]\n",
        "    )\n",
        "\n",
        "    state_values = calculate_grid_world_state_values(env)\n",
        "\n",
        "    draw_grid_world_state_values_image(state_values, GRID_HEIGHT, GRID_WIDTH)\n",
        "\n",
        "    with np.printoptions(precision=2, suppress=True):\n",
        "        print(state_values)\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 535
        },
        "id": "mDNA3SokTyLC",
        "outputId": "3f910b3e-d3a4-46c1-aa86-fb4e78995060"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 4.58 11.09  6.14  7.92  2.92]\n",
            " [ 2.33  4.03  3.25  3.04  1.44]\n",
            " [ 0.52  1.27  1.21  0.92  0.1 ]\n",
            " [-0.69 -0.14 -0.05 -0.28 -0.89]\n",
            " [-1.66 -1.14 -1.02 -1.21 -1.77]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 학습 이후의 행동가치함수를 표 형태로 그리는 함수\n",
        "def draw_grid_world_action_values_image(\n",
        "    action_values, GRID_HEIGHT, GRID_WIDTH, NUM_ACTIONS, ACTION_SYMBOLS):\n",
        "\n",
        "    action_str_values = []\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        action_str_values.append([])\n",
        "        for j in range(GRID_WIDTH):\n",
        "            str_values = []\n",
        "            for action in range(NUM_ACTIONS):\n",
        "                str_values.append(\"{0} ({1}): {2:.2f}\".format(\n",
        "                    ACTION_SYMBOLS[action],\n",
        "                    action,\n",
        "                    np.round(action_values[i, j, action], decimals=2)\n",
        "                ))\n",
        "            action_str_values[i].append(\"\\n\".join(str_values))\n",
        "\n",
        "    # 축 표시 제거, 크기 조절 등 이미지 그리기 이전 설정 작업\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.set_axis_off()\n",
        "    table = Table(ax, bbox=[0, 0, 1, 1])\n",
        "\n",
        "    nrows, ncols = GRID_HEIGHT, GRID_WIDTH\n",
        "    width, height = 1.0 / ncols, 1.0 / nrows\n",
        "\n",
        "    # 렌더링 할 이미지에 표 셀과 해당 값 추가\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            table.add_cell(\n",
        "                i, j, width, height,\n",
        "                text=action_str_values[i][j],\n",
        "                loc='center', facecolor='white'\n",
        "            )\n",
        "\n",
        "    # 행, 열 라벨 추가\n",
        "    for i in range(len(action_str_values)):\n",
        "        table.add_cell(\n",
        "            i, -1, width, height,\n",
        "            text=i+1, loc='right', edgecolor='none', facecolor='none')\n",
        "        table.add_cell(\n",
        "            -1, i, width, height/2,\n",
        "            text=i+1, loc='center', edgecolor='none', facecolor='none')\n",
        "\n",
        "    for key, cell in table.get_celld().items():\n",
        "         cell.get_text().set_fontsize(10)\n",
        "\n",
        "    ax.add_table(table)\n",
        "\n",
        "    plt.show()\n",
        "    plt.close()"
      ],
      "metadata": {
        "id": "6LczyA3yRlaK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 학습 이후의 최적 정책을 표 형태로 그리는 함수\n",
        "def draw_grid_world_optimal_policy_image(\n",
        "    policy, GRID_HEIGHT, GRID_WIDTH, ACTION_SYMBOLS, TERMINAL_STATES=None):\n",
        "\n",
        "    action_str_values = []\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        action_str_values.append([])\n",
        "        for j in range(GRID_WIDTH):\n",
        "            if TERMINAL_STATES and (i, j) in TERMINAL_STATES:\n",
        "                continue\n",
        "            str_values = []\n",
        "            for action in policy[(i, j)]:\n",
        "                str_values.append(\"{0} ({1})\".format(\n",
        "                    ACTION_SYMBOLS[action],\n",
        "                    np.round(action, decimals=2)\n",
        "                ))\n",
        "            action_str_values[i].append(\"\\n\".join(str_values))\n",
        "\n",
        "    # 축 표시 제거, 크기 조절 등 이미지 그리기 이전 설정 작업\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.set_axis_off()\n",
        "    table = Table(ax, bbox=[0, 0, 1, 1])\n",
        "\n",
        "    nrows, ncols = GRID_HEIGHT, GRID_WIDTH\n",
        "    width, height = 1.0 / ncols, 1.0 / nrows\n",
        "\n",
        "    # 렌더링 할 이미지에 표 셀과 해당 값 추가\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            if TERMINAL_STATES and (i, j) in TERMINAL_STATES:\n",
        "                continue\n",
        "            table.add_cell(\n",
        "                i, j, width, height,\n",
        "                text=action_str_values[i][j], loc='center', facecolor='white')\n",
        "\n",
        "    # 행, 열 라벨 추가\n",
        "    for i in range(len(action_str_values)):\n",
        "        table.add_cell(\n",
        "            i, -1, width, height,\n",
        "            text=i+1, loc='right', edgecolor='none', facecolor='none')\n",
        "        table.add_cell(\n",
        "            -1, i, width, height/2,\n",
        "            text=i+1, loc='center', edgecolor='none', facecolor='none')\n",
        "\n",
        "    for key, cell in table.get_celld().items():\n",
        "         cell.get_text().set_fontsize(10)\n",
        "\n",
        "    ax.add_table(table)\n",
        "\n",
        "    plt.show()\n",
        "    plt.close()"
      ],
      "metadata": {
        "id": "aZKV1jMiRnK7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#각 상태별 상태 가치 산출\n",
        "\n",
        "import numpy as np\n",
        "import os\n",
        "\n",
        "GRID_HEIGHT = 5\n",
        "GRID_WIDTH = 5\n",
        "\n",
        "DISCOUNT_RATE = 0.9         # 감쇄율\n",
        "\n",
        "\n",
        "# 그리드 월드에서 상태 가치 산출\n",
        "def calculate_grid_world_state_values(env):\n",
        "    ACTION_PROBABILITY = 0.25\n",
        "    value_function = np.zeros(shape=(GRID_HEIGHT, GRID_WIDTH))\n",
        "\n",
        "    # 가치 함수의 값들이 수렴할 때까지 반복\n",
        "    while True:\n",
        "        # value_function과 동일한 형태를 가지면서 값은\n",
        "        # 모두 0인 배열을 new_value_function에 저장\n",
        "        new_value_function = np.zeros_like(value_function)\n",
        "\n",
        "        for i in range(GRID_HEIGHT):\n",
        "            for j in range(GRID_WIDTH):\n",
        "                values = []\n",
        "                # 주어진 상태에서 가능한 모든 행동들의 결과로\n",
        "                # 다음 상태들을 갱신\n",
        "                for action in env.ACTIONS:\n",
        "                    (next_i, next_j), reward, transition_prob \\\n",
        "                    = env.get_state_action_probability(\n",
        "                        state=(i, j),\n",
        "                        action=action\n",
        "                    )\n",
        "\n",
        "                    # Bellman-Equation, 벨만 방정식 적용\n",
        "                    values.append(\n",
        "                        ACTION_PROBABILITY * transition_prob * \\\n",
        "                        (reward + DISCOUNT_RATE * \\\n",
        "                         value_function[next_i, next_j])\n",
        "                    )\n",
        "\n",
        "                new_value_function[i, j] = np.sum(values)\n",
        "\n",
        "        # 가치 함수 수렴 여부 판단 (0.0001 == 1e-4)\n",
        "        if np.sum(np.abs(value_function - new_value_function)) < 1e-4:\n",
        "            break\n",
        "\n",
        "        # 가치 함수 갱신\n",
        "        value_function = new_value_function\n",
        "\n",
        "    return new_value_function\n",
        "\n",
        "A_POSITION = (0, 1)         # 임의로 지정한 특별한 상태 A 좌표\n",
        "B_POSITION = (0, 3)         # 임의로 지정한 특별한 상태 B 좌표\n",
        "\n",
        "A_PRIME_POSITION = (4, 1)   # 상태 A에서 행동시 도착할 위치 좌표\n",
        "B_PRIME_POSITION = (2, 3)   # 상태 B에서 행동시 도착할 위치 좌표\n",
        "\n",
        "def main():\n",
        "    # 5x5 맵 생성\n",
        "    env = GridWorld(\n",
        "        height=GRID_HEIGHT,\n",
        "        width=GRID_WIDTH,\n",
        "        start_state=None,\n",
        "        terminal_states=[],\n",
        "        transition_reward=0.0,\n",
        "        outward_reward=-1.0,\n",
        "        warm_hole_states=[\n",
        "            (A_POSITION, A_PRIME_POSITION, 10.0),\n",
        "            (B_POSITION, B_PRIME_POSITION, 5.0)\n",
        "        ]\n",
        "    )\n",
        "\n",
        "    state_values = calculate_grid_world_state_values(env)\n",
        "\n",
        "    draw_grid_world_state_values_image(state_values, GRID_HEIGHT, GRID_WIDTH)\n",
        "\n",
        "    with np.printoptions(precision=2, suppress=True):\n",
        "        print(state_values)\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()"
      ],
      "metadata": {
        "id": "hpYtLGw3R_lL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 최적 상태 가치 산출\n",
        "\n",
        "GRID_HEIGHT = 5\n",
        "GRID_WIDTH = 5\n",
        "\n",
        "DISCOUNT_RATE = 0.9      # 감쇄율\n",
        "\n",
        "A_POSITION = (0, 1)         # 임의로 지정한 특별한 상태 A 좌표\n",
        "B_POSITION = (0, 3)         # 임의로 지정한 특별한 상태 B 좌표\n",
        "\n",
        "A_PRIME_POSITION = (4, 1)   # 상태 A에서 행동시 도착할 위치 좌표\n",
        "B_PRIME_POSITION = (2, 2)   # 상태 B에서 행동시 도착할 위치 좌표\n",
        "\n",
        "\n",
        "# 그리드 월드에서 최적 상태 가치 산출\n",
        "def calculate_grid_world_optimal_state_values(env):\n",
        "    value_function = np.zeros(shape=(GRID_HEIGHT, GRID_WIDTH))\n",
        "\n",
        "    # 가치 함수의 값들이 수렴할 때까지 반복\n",
        "    while True:\n",
        "        # value_function과 동일한 형태를 가지면서 값은\n",
        "        # 모두 0인 배열을 new_value_function에 저장\n",
        "        new_value_function = np.zeros_like(value_function)\n",
        "\n",
        "        for i in range(GRID_HEIGHT):\n",
        "            for j in range(GRID_WIDTH):\n",
        "                values = []\n",
        "                # 주어진 상태에서 가능한 모든 행동들의 결과로\n",
        "                # 다음 상태 및 보상 정보 갱신\n",
        "                for action in env.ACTIONS:\n",
        "                    (next_i, next_j), reward, prob \\\n",
        "                    = env.get_state_action_probability(\n",
        "                        state=(i, j), action=action\n",
        "                        )\n",
        "\n",
        "                    # Bellman Optimality Equation, 벨만 최적 방정식 적용\n",
        "                    values.append(\n",
        "                        prob * (reward + DISCOUNT_RATE * \\\n",
        "                                value_function[next_i, next_j])\n",
        "                    )\n",
        "\n",
        "                # 새롭게 계산된 상태 가치 중 최대 상태 가치로\n",
        "                # 현재 상태의 가치 갱신\n",
        "                new_value_function[i, j] = np.max(values)\n",
        "\n",
        "        # 가치 함수 수렴 여부 판단\n",
        "        if np.sum(np.abs(new_value_function - value_function)) < 1e-4:\n",
        "            break\n",
        "\n",
        "        value_function = new_value_function\n",
        "\n",
        "    return new_value_function\n",
        "\n",
        "def main():\n",
        "    # 5x5 맵 생성\n",
        "    env = GridWorld(\n",
        "        height=GRID_HEIGHT,\n",
        "        width=GRID_WIDTH,\n",
        "        start_state=None,\n",
        "        terminal_states=[],\n",
        "        transition_reward=0,\n",
        "        outward_reward=-1.0,\n",
        "        warm_hole_states=[\n",
        "            (A_POSITION, A_PRIME_POSITION, 10.0),\n",
        "            (B_POSITION, B_PRIME_POSITION, 5.0)\n",
        "        ]\n",
        "    )\n",
        "\n",
        "    optimal_state_values = calculate_grid_world_optimal_state_values(env)\n",
        "\n",
        "    draw_grid_world_state_values_image(\n",
        "        optimal_state_values, GRID_HEIGHT, GRID_WIDTH\n",
        "    )\n",
        "\n",
        "    with np.printoptions(precision=2, suppress=True):\n",
        "        print(optimal_state_values)\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()"
      ],
      "metadata": {
        "id": "LdQmKJQ0SDMS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 535
        },
        "outputId": "1e76fe4e-e7c9-41ee-8604-394ab53b3a89"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[21.98 24.42 21.98 21.02 18.92]\n",
            " [19.78 21.98 19.78 18.92 17.03]\n",
            " [17.8  19.78 17.8  17.03 15.32]\n",
            " [16.02 17.8  16.02 15.32 13.79]\n",
            " [14.42 16.02 14.42 13.79 12.41]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 최적 행동 가치 및 정책 산출\n",
        "\n",
        "GRID_HEIGHT = 5\n",
        "GRID_WIDTH = 5\n",
        "DISCOUNT_RATE = 0.9      # 감쇄율\n",
        "\n",
        "A_POSITION = (0, 1)         # 임의로 지정한 특별한 상태 A 좌표\n",
        "B_POSITION = (0, 3)         # 임의로 지정한 특별한 상태 B 좌표\n",
        "\n",
        "A_PRIME_POSITION = (4, 1)   # 상태 A에서 행동시 도착할 위치 좌표\n",
        "B_PRIME_POSITION = (2, 3)   # 상태 B에서 행동시 도착할 위치 좌표\n",
        "\n",
        "\n",
        "# 그리드 월드에서 최적 행동 가치 산출\n",
        "def calculate_grid_world_optimal_action_values(env):\n",
        "    action_value_function = np.zeros(\n",
        "        shape=(GRID_HEIGHT, GRID_WIDTH, env.NUM_ACTIONS)\n",
        "    )\n",
        "\n",
        "    # 행동 가치 테이블의 값들이 수렴할 때까지 반복\n",
        "    while True:\n",
        "        # action_value_function과 동일한 형태를 가지면서 값은\n",
        "        # 모두 0인 배열을 new_action_value_function에 저장\n",
        "        new_action_value_function = np.zeros_like(action_value_function)\n",
        "\n",
        "        for i in range(GRID_HEIGHT):\n",
        "            for j in range(GRID_WIDTH):\n",
        "                # 주어진 상태에서 가능한 모든 행동들의 결과로\n",
        "                # 다음 상태 및 보상 정보 갱신\n",
        "                for action in env.ACTIONS:\n",
        "                    (next_i, next_j), reward, prob \\\n",
        "                    = env.get_state_action_probability(\n",
        "                        state=(i, j), action=action\n",
        "                    )\n",
        "\n",
        "                    # Bellman Optimality Equation, 벨만 최적 방정식 적용\n",
        "                    # 새로운 행동 가치 갱신\n",
        "                    new_action_value_function[i, j, action] = \\\n",
        "                        prob * (reward + DISCOUNT_RATE * \\\n",
        "                        np.max(action_value_function[next_i, next_j, :]))\n",
        "\n",
        "        # 행동 가치 테이블 수렴 여부 판단\n",
        "        if np.sum(np.abs(new_action_value_function - action_value_function)) < 1e-4:\n",
        "            break\n",
        "\n",
        "        action_value_function = new_action_value_function\n",
        "\n",
        "    return new_action_value_function\n",
        "\n",
        "def calculate_optimal_policy(optimal_action_value):\n",
        "    optimal_policy = dict()\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            indices = [idx for idx, value_\n",
        "                       in enumerate(optimal_action_value[i, j, :]) if\n",
        "                       value_ == np.max(optimal_action_value[i, j, :])]\n",
        "            optimal_policy[(i, j)] = indices\n",
        "\n",
        "    return optimal_policy\n",
        "\n",
        "def main():\n",
        "    # 5x5 맵 생성\n",
        "    env = GridWorld(\n",
        "        height=GRID_HEIGHT,\n",
        "        width=GRID_WIDTH,\n",
        "        start_state=None,\n",
        "        terminal_states=[],\n",
        "        transition_reward=0,\n",
        "        outward_reward=-1.0,\n",
        "        warm_hole_states=[\n",
        "            (A_POSITION, A_PRIME_POSITION, 10.0),\n",
        "            (B_POSITION, B_PRIME_POSITION, 5.0)\n",
        "        ]\n",
        "    )\n",
        "\n",
        "    optimal_action_values = calculate_grid_world_optimal_action_values(env)\n",
        "\n",
        "    draw_grid_world_action_values_image(\n",
        "        optimal_action_values, GRID_HEIGHT, GRID_WIDTH,\n",
        "        env.NUM_ACTIONS, env.ACTION_SYMBOLS\n",
        "    )\n",
        "\n",
        "    print()\n",
        "\n",
        "    optimal_policy = calculate_optimal_policy(optimal_action_values)\n",
        "    draw_grid_world_optimal_policy_image(\n",
        "        optimal_policy, GRID_HEIGHT, GRID_WIDTH, env.ACTION_SYMBOLS\n",
        "    )\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()"
      ],
      "metadata": {
        "id": "sBN0XSJWSNGL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Zo7ucHR6SVfM"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}