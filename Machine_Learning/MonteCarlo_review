{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNXuwZ4gUfDyRp8oEb2qX2q",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yoosohee/2025_ClassStudy/blob/main/Machine_Learning/MonteCarlo_review\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "b4zhzVrRUG_j"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import random\n",
        "import time\n",
        "\n",
        "# -------------------------------\n",
        "# |(0,0)|(0,1)|(0,2)|(0,3)|(0,4)|\n",
        "# |(1,0)|(1,1)|(1,2)|(1,3)|(1,4)|\n",
        "# |(2,0)|(2,1)|(2,2)|(2,3)|(2,4)|\n",
        "# |(3,0)|(3,1)|(3,2)|(3,3)|(3,4)|\n",
        "# |(4,0)|(4,1)|(4,2)|(4,3)|(4,4)|\n",
        "# -------------------------------\n",
        "\n",
        "\n",
        "class GridWorld():\n",
        "    def __init__(\n",
        "            self,\n",
        "            height=5, width=5,        # 격자판의 크기\n",
        "            start_state=(0, 0),       # 시작 상태\n",
        "            terminal_states=[(4, 4)], # 종료 상태\n",
        "            transition_reward=0.0,    # 일반적인 상태 전이 보상\n",
        "            terminal_reward=1.0,      # 종료 상태로 이동하는 행동 수행\n",
        "                                      # 때 받는 보상\n",
        "            outward_reward=0.0,       # 미로 바깥으로 이동하는 행동 수행\n",
        "                                      # 때 받는 보상\n",
        "            warm_hole_states=None     # 윔홀 정의\n",
        "    ):\n",
        "        self.__version__ = \"0.0.1\"\n",
        "\n",
        "        # 그리드월드의 세로 길이\n",
        "        self.HEIGHT = height\n",
        "\n",
        "        # 그리드월드의 가로 길이\n",
        "        self.WIDTH = width\n",
        "\n",
        "        self.STATES = []\n",
        "        self.num_states = self.WIDTH * self.HEIGHT\n",
        "\n",
        "        for i in range(self.HEIGHT):\n",
        "            for j in range(self.WIDTH):\n",
        "                self.STATES.append((i, j))\n",
        "\n",
        "        # 터미널 상태를 상태 집합에서 제거\n",
        "        for state in terminal_states:\n",
        "            self.STATES.remove(state)\n",
        "\n",
        "        self.current_state = None\n",
        "\n",
        "        # 모든 가능한 행동\n",
        "        self.ACTION_UP = 0\n",
        "        self.ACTION_DOWN = 1\n",
        "        self.ACTION_LEFT = 2\n",
        "        self.ACTION_RIGHT = 3\n",
        "\n",
        "        self.ACTIONS = [\n",
        "            self.ACTION_UP,\n",
        "            self.ACTION_DOWN,\n",
        "            self.ACTION_LEFT,\n",
        "            self.ACTION_RIGHT\n",
        "        ]\n",
        "\n",
        "        # UP, DOWN, LEFT, RIGHT\n",
        "        self.ACTION_SYMBOLS = [\"↑\", \"↓\", \"←\", \"→\"]\n",
        "\n",
        "        self.NUM_ACTIONS = len(self.ACTIONS)\n",
        "\n",
        "        # 시작 상태 위치\n",
        "        self.START_STATE = start_state\n",
        "\n",
        "        # 종료 상태 위치\n",
        "        self.TERMINAL_STATES = terminal_states\n",
        "\n",
        "        # 웜홀 상태 위치\n",
        "        self.WARM_HOLE_STATES = warm_hole_states\n",
        "\n",
        "        # 일반 상태 전이 수행에 대한 보상 값\n",
        "        self.transition_reward = transition_reward\n",
        "\n",
        "        # 종료 상태 전이 수행에 대한 보상 값\n",
        "        self.terminal_reward = terminal_reward\n",
        "\n",
        "        # 그리드월드 바깥으로 상태 전이 수행해 대한 보상 값\n",
        "        self.outward_reward = outward_reward\n",
        "\n",
        "\n",
        "    # 환경 초기화 작업: 에이전트의 현재 위치를 START_STATE로 설정\n",
        "    def reset(self):\n",
        "        self.current_state = self.START_STATE\n",
        "        return self.current_state\n",
        "\n",
        "    # 에이전트의 현재 위치를 state로 설정\n",
        "    def moveto(self, state):\n",
        "        self.current_state = state\n",
        "\n",
        "    # 주어진 state 상태가 웜홀 상태이면 True 반환하고, 아니면 False 반환\n",
        "    def is_warm_hole_state(self, state):\n",
        "        i, j = state\n",
        "\n",
        "        if self.WARM_HOLE_STATES is not None \\\n",
        "            and len(self.WARM_HOLE_STATES) > 0:\n",
        "            for warm_hole_info in self.WARM_HOLE_STATES:\n",
        "                warm_hole_state = warm_hole_info[0]\n",
        "                if i == warm_hole_state[0] and j == warm_hole_state[1]:\n",
        "                    return True\n",
        "        return False\n",
        "\n",
        "    # 주어진 웜홀 상태 state에 대하여 미리 정해져 있는 다음 상태 반환\n",
        "    def get_next_state_warm_hole(self, state):\n",
        "        i, j = state\n",
        "        next_state = None\n",
        "\n",
        "        for warm_hole_info in self.WARM_HOLE_STATES:\n",
        "            warm_hole_state = warm_hole_info[0]\n",
        "            warm_hole_prime_state = warm_hole_info[1]\n",
        "\n",
        "            if i == warm_hole_state[0] and j == warm_hole_state[1]:\n",
        "                next_state = warm_hole_prime_state\n",
        "                break\n",
        "        return next_state\n",
        "\n",
        "    # 주어진 웜홀 상태 state에 대하여 미리 정해져 있는 보상 반환\n",
        "    def get_reward_warm_hole(self, state):\n",
        "        i, j = state\n",
        "        reward = None\n",
        "\n",
        "        for warm_hole_info in self.WARM_HOLE_STATES:\n",
        "            warm_hole_state = warm_hole_info[0]\n",
        "            warm_hole_reward = warm_hole_info[2]\n",
        "\n",
        "            if i == warm_hole_state[0] and j == warm_hole_state[1]:\n",
        "                reward = warm_hole_reward\n",
        "                break\n",
        "\n",
        "        return reward\n",
        "\n",
        "    # 주어진 상태 state와 행동 action에 대한 다음 상태 반환\n",
        "    def get_next_state(self, state, action):\n",
        "        i, j = state\n",
        "\n",
        "        # 주어진 상태가 웜홀 상태이면 미리 정해진 다음 상태를 반환\n",
        "        if self.is_warm_hole_state(state):\n",
        "            next_state = self.get_next_state_warm_hole(state)\n",
        "            next_i = next_state[0]\n",
        "            next_j = next_state[1]\n",
        "        # 주어진 상태가 종료 상태이면 현재 상태를\n",
        "        # 다음 상태로 설정하여 반환\n",
        "        elif (i, j) in self.TERMINAL_STATES:\n",
        "            next_i = i\n",
        "            next_j = j\n",
        "        # 주어진 행동 수행에 따른 다음 상태 반환\n",
        "        # 주어진 행동에 의하여 그리드월드 밖으로 이동하는 경우\n",
        "        # 제자리에 멈춤\n",
        "        else:\n",
        "            if action == self.ACTION_UP:\n",
        "                next_i = max(i - 1, 0)\n",
        "                next_j = j\n",
        "            elif action == self.ACTION_DOWN:\n",
        "                next_i = min(i + 1, self.HEIGHT - 1)\n",
        "                next_j = j\n",
        "            elif action == self.ACTION_LEFT:\n",
        "                next_i = i\n",
        "                next_j = max(j - 1, 0)\n",
        "            elif action == self.ACTION_RIGHT:\n",
        "                next_i = i\n",
        "                next_j = min(j + 1, self.WIDTH - 1)\n",
        "            else:\n",
        "                raise ValueError()\n",
        "\n",
        "        return next_i, next_j\n",
        "\n",
        "    # 주어진 상태 state에서 다음 상태 next_state로 이동할 경우\n",
        "    # 얻는 보상 반환\n",
        "    def get_reward(self, state, next_state):\n",
        "        i, j = state\n",
        "        next_i, next_j = next_state\n",
        "\n",
        "        # 주어진 상태가 웜홀 상태이면 미리 정해진 보상 반환\n",
        "        if self.is_warm_hole_state(state):\n",
        "            reward = self.get_reward_warm_hole(state)\n",
        "        else:\n",
        "            # 다음 상태가 종료 상태이면 미리 정해진 보상 반환\n",
        "            if (next_i, next_j) in self.TERMINAL_STATES:\n",
        "                reward = self.terminal_reward\n",
        "            else:\n",
        "                # 주어진 행동에 의하여 그리드월드 밖으로 이동하는 경우\n",
        "                # 제자리에 멈추면서 미리 정해진 보상 반환\n",
        "                if i == next_i and j == next_j:\n",
        "                    reward = self.outward_reward\n",
        "                # 일반적인 상태 전이인 경우 미리 정해진\n",
        "                # 일반 전이 보상 반환\n",
        "                else:\n",
        "                    reward = self.transition_reward\n",
        "\n",
        "        return reward\n",
        "\n",
        "    # 주어진 상태 state에서 행동 action을 수행할 때 전이되는\n",
        "    # 다음 상태 및 보상과 이에 대한 전이 확률을 반환\n",
        "    def get_state_action_probability(self, state, action):\n",
        "        next_i, next_j = self.get_next_state(state, action)\n",
        "\n",
        "        reward = self.get_reward(state, (next_i, next_j))\n",
        "        transition_prob = 1.0\n",
        "\n",
        "        return (next_i, next_j), reward, transition_prob\n",
        "\n",
        "    # 에이전트가 행동 action을 선택하여 환경에 적용할 때 호출하는 함수\n",
        "    # 행동 action이 수행된 이후 전이된 다음 상태, 보상, 종료 유무 반환\n",
        "    def step(self, action):\n",
        "        next_i, next_j = self.get_next_state(\n",
        "            state=self.current_state, action=action\n",
        "        )\n",
        "\n",
        "        reward = self.get_reward(self.current_state, (next_i, next_j))\n",
        "\n",
        "        self.current_state = (next_i, next_j)\n",
        "\n",
        "        if self.current_state in self.TERMINAL_STATES:\n",
        "            done = True\n",
        "        else:\n",
        "            done = False\n",
        "\n",
        "        return (next_i, next_j), reward, done, None\n",
        "\n",
        "    # 그리드월드 환경을 화면에 출력\n",
        "    def render(self, mode='human'):\n",
        "        print(self.__str__())\n",
        "\n",
        "    # 임의의 행동을 선택하여 반환\n",
        "    def get_random_action(self):\n",
        "        return random.choice(self.ACTIONS)\n",
        "\n",
        "    # 그리드월드 환경을 문자열로 변환\n",
        "    def __str__(self):\n",
        "        gridworld_str = \"\"\n",
        "        for i in range(self.HEIGHT):\n",
        "            gridworld_str += \"-------------------------------\\n\"\n",
        "\n",
        "            for j in range(self.WIDTH):\n",
        "                if self.current_state[0] == i and self.current_state[1] == j:\n",
        "                    gridworld_str += \"|  {0}  \".format(\"*\")\n",
        "                elif (i, j) == self.START_STATE:\n",
        "                    gridworld_str += \"|  {0}  \".format(\"S\")\n",
        "                elif (i, j) in self.TERMINAL_STATES:\n",
        "                    gridworld_str += \"|  {0}  \".format(\"G\")\n",
        "                elif self.WARM_HOLE_STATES and \\\n",
        "                     (i, j) in [state[0] for state in self.WARM_HOLE_STATES]:\n",
        "                    gridworld_str += \"|  {0}  \".format(\"W\")\n",
        "                else:\n",
        "                    gridworld_str += \"|     \"\n",
        "            gridworld_str += \"|\\n\"\n",
        "\n",
        "            for j in range(self.WIDTH):\n",
        "                gridworld_str += \"|({0},{1})\".format(i, j)\n",
        "\n",
        "            gridworld_str += \"|\\n\"\n",
        "\n",
        "        gridworld_str += \"-------------------------------\\n\"\n",
        "        return gridworld_str\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.table import Table\n",
        "\n",
        "# 학습 이후의 가치함수를 표 형태로 그리는 함수\n",
        "def draw_grid_world_state_values_image(state_values, GRID_HEIGHT, GRID_WIDTH):\n",
        "\n",
        "    # 축 표시 제거, 크기 조절 등 이미지 그리기를 위한 설정\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.set_axis_off()\n",
        "    table = Table(ax, bbox=[0, 0, 1, 1])\n",
        "\n",
        "    nrows, ncols = GRID_HEIGHT, GRID_WIDTH\n",
        "    width, height = 1.0 / ncols, 1.0 / nrows\n",
        "\n",
        "    # 렌더링 할 이미지에 표 셀과 해당 값 추가\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            table.add_cell(\n",
        "                i, j, width, height,\n",
        "                text=np.round(state_values[i][j], decimals=2),\n",
        "                loc='center', facecolor='white'\n",
        "            )\n",
        "\n",
        "    # 행, 열 라벨 추가\n",
        "    for i in range(len(state_values)):\n",
        "        table.add_cell(\n",
        "            i, -1, width, height,\n",
        "            text=i+1, loc='right', edgecolor='none', facecolor='none'\n",
        "        )\n",
        "        table.add_cell(\n",
        "            -1, i, width, height/2,\n",
        "            text=i+1, loc='center', edgecolor='none', facecolor='none'\n",
        "        )\n",
        "\n",
        "    for key, cell in table.get_celld().items():\n",
        "         cell.get_text().set_fontsize(20)\n",
        "\n",
        "    ax.add_table(table)\n",
        "\n",
        "    plt.show()\n",
        "    plt.close()\n",
        "\n",
        "# 학습 이후의 행동가치함수를 표 형태로 그리는 함수\n",
        "def draw_grid_world_action_values_image(\n",
        "    action_values, GRID_HEIGHT, GRID_WIDTH, NUM_ACTIONS, ACTION_SYMBOLS):\n",
        "\n",
        "    action_str_values = []\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        action_str_values.append([])\n",
        "        for j in range(GRID_WIDTH):\n",
        "            str_values = []\n",
        "            for action in range(NUM_ACTIONS):\n",
        "                str_values.append(\"{0} ({1}): {2:.2f}\".format(\n",
        "                    ACTION_SYMBOLS[action],\n",
        "                    action,\n",
        "                    np.round(action_values[i, j, action], decimals=2)\n",
        "                ))\n",
        "            action_str_values[i].append(\"\\n\".join(str_values))\n",
        "\n",
        "    # 축 표시 제거, 크기 조절 등 이미지 그리기 이전 설정 작업\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.set_axis_off()\n",
        "    table = Table(ax, bbox=[0, 0, 1, 1])\n",
        "\n",
        "    nrows, ncols = GRID_HEIGHT, GRID_WIDTH\n",
        "    width, height = 1.0 / ncols, 1.0 / nrows\n",
        "\n",
        "    # 렌더링 할 이미지에 표 셀과 해당 값 추가\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            table.add_cell(\n",
        "                i, j, width, height,\n",
        "                text=action_str_values[i][j],\n",
        "                loc='center', facecolor='white'\n",
        "            )\n",
        "\n",
        "    # 행, 열 라벨 추가\n",
        "    for i in range(len(action_str_values)):\n",
        "        table.add_cell(\n",
        "            i, -1, width, height,\n",
        "            text=i+1, loc='right', edgecolor='none', facecolor='none')\n",
        "        table.add_cell(\n",
        "            -1, i, width, height/2,\n",
        "            text=i+1, loc='center', edgecolor='none', facecolor='none')\n",
        "\n",
        "    for key, cell in table.get_celld().items():\n",
        "         cell.get_text().set_fontsize(10)\n",
        "\n",
        "    ax.add_table(table)\n",
        "\n",
        "    plt.show()\n",
        "    plt.close()\n",
        "\n",
        "# 학습 이후의 최적 정책을 표 형태로 그리는 함수\n",
        "def draw_grid_world_optimal_policy_image(\n",
        "    policy, GRID_HEIGHT, GRID_WIDTH, ACTION_SYMBOLS, TERMINAL_STATES=None):\n",
        "\n",
        "    action_str_values = []\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        action_str_values.append([])\n",
        "        for j in range(GRID_WIDTH):\n",
        "            if TERMINAL_STATES and (i, j) in TERMINAL_STATES:\n",
        "                continue\n",
        "            str_values = []\n",
        "            actions, probs = policy[(i, j)]\n",
        "            for action in actions:\n",
        "                str_values.append(\"{0} ({1})\".format(\n",
        "                    ACTION_SYMBOLS[action],\n",
        "                    np.round(probs[action], decimals=3)\n",
        "                ))\n",
        "            action_str_values[i].append(\"\\n\".join(str_values))\n",
        "\n",
        "    # 축 표시 제거, 크기 조절 등 이미지 그리기 이전 설정 작업\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.set_axis_off()\n",
        "    table = Table(ax, bbox=[0, 0, 1, 1])\n",
        "\n",
        "    nrows, ncols = GRID_HEIGHT, GRID_WIDTH\n",
        "    width, height = 1.0 / ncols, 1.0 / nrows\n",
        "\n",
        "    # 렌더링 할 이미지에 표 셀과 해당 값 추가\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            if TERMINAL_STATES and (i, j) in TERMINAL_STATES:\n",
        "                continue\n",
        "            table.add_cell(i, j, width, height, text=action_str_values[i][j],\n",
        "                           loc='center', facecolor='white')\n",
        "\n",
        "    # 행, 열 라벨 추가\n",
        "    for i in range(len(action_str_values)):\n",
        "        table.add_cell(i, -1, width, height, text=i+1, loc='right',\n",
        "                       edgecolor='none', facecolor='none')\n",
        "        table.add_cell(-1, i, width, height/2, text=i+1, loc='center',\n",
        "                       edgecolor='none', facecolor='none')\n",
        "\n",
        "    for key, cell in table.get_celld().items():\n",
        "         cell.get_text().set_fontsize(10)\n",
        "\n",
        "    ax.add_table(table)\n",
        "\n",
        "    plt.show()\n",
        "    plt.close()\n",
        "\n",
        "def softmax(x):\n",
        "    B = np.exp(x - np.max(x))\n",
        "    C = np.sum(B)\n",
        "    return B/C"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "GRID_HEIGHT = 4\n",
        "GRID_WIDTH = 4\n",
        "TERMINAL_STATES = [(0, 0), (GRID_HEIGHT-1, GRID_WIDTH-1)]\n",
        "\n",
        "def get_exploring_start_state():\n",
        "    while True:\n",
        "        i = random.randrange(GRID_HEIGHT)\n",
        "        j = random.randrange(GRID_WIDTH)\n",
        "        if (i, j) not in TERMINAL_STATES:\n",
        "            break\n",
        "    return (i, j)\n",
        "\n",
        "# 환경에서 무작위로 에피소드 생성\n",
        "def generate_random_episode_and_state_actions(env):\n",
        "    episode = []\n",
        "    visited_state_actions = []\n",
        "\n",
        "    # 탐험적 시작 기반 몬테카를로 제어\n",
        "    initial_state = get_exploring_start_state()\n",
        "    env.moveto(initial_state)\n",
        "\n",
        "    state = initial_state\n",
        "    done = False\n",
        "    while not done:\n",
        "        # 상태에 관계없이 항상 4가지 행동 중 하나를 선택하여 수행\n",
        "        action = random.randrange(env.NUM_ACTIONS)\n",
        "\n",
        "        next_state, reward, done, _ = env.step(action)\n",
        "\n",
        "        episode.append(((state, action), reward))\n",
        "        visited_state_actions.append((state, action))\n",
        "\n",
        "        state = next_state\n",
        "\n",
        "    return episode, visited_state_actions\n",
        "\n",
        "# 첫 방문 행동 가치 MC 예측\n",
        "def first_visit_mc_prediction(env, gamma, num_iter):\n",
        "    # 비어있는 상태-가치 함수를 0으로 초기화하며 생성함\n",
        "    state_action_values = np.zeros((GRID_HEIGHT, GRID_WIDTH, env.NUM_ACTIONS))\n",
        "    returns = dict()\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            for action in env.ACTIONS:\n",
        "                returns[((i, j), action)] = list()\n",
        "\n",
        "    for i in range(num_iter):\n",
        "        episode, visited_state_actions = generate_random_episode_and_state_actions(env)\n",
        "\n",
        "        G = 0\n",
        "        for idx, ((state, action), reward) in enumerate(reversed(episode)):\n",
        "            G = gamma * G + reward\n",
        "\n",
        "            value_prediction_conditions = [\n",
        "                (state, action) not in \\\n",
        "                    visited_state_actions[:len(visited_state_actions) - idx - 1],\n",
        "                state not in TERMINAL_STATES\n",
        "            ]\n",
        "\n",
        "            if all(value_prediction_conditions):\n",
        "                returns[(state, action)].append(G)\n",
        "                state_action_values[state[0], state[1], action] \\\n",
        "                    = np.mean(returns[(state, action)])\n",
        "\n",
        "        if i % 1000 == 0:\n",
        "            print(\"Iteration: {0}\".format(i))\n",
        "\n",
        "    print(\"Iteration: {0}\".format(i))\n",
        "\n",
        "    return state_action_values, returns\n",
        "\n",
        "# 모든 방문 행동 가치 MC 예측\n",
        "def every_visit_mc_prediction(env, gamma, num_iter):\n",
        "    # 비어있는 상태-가치 함수를 0으로 초기화하며 생성함\n",
        "    state_action_values = np.zeros((GRID_HEIGHT, GRID_WIDTH, env.NUM_ACTIONS))\n",
        "    returns = dict()\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            for action in env.ACTIONS:\n",
        "                returns[((i, j), action)] = list()\n",
        "\n",
        "    for i in range(num_iter):\n",
        "        episode, _ = generate_random_episode_and_state_actions(env)\n",
        "\n",
        "        G = 0\n",
        "        for idx, ((state, action), reward) in enumerate(reversed(episode)):\n",
        "            G = gamma * G + reward\n",
        "\n",
        "            value_prediction_conditions = [\n",
        "                state not in TERMINAL_STATES\n",
        "            ]\n",
        "\n",
        "            if all(value_prediction_conditions):\n",
        "                returns[(state, action)].append(G)\n",
        "                state_action_values[state[0], state[1], action] \\\n",
        "                    = np.mean(returns[(state, action)])\n",
        "\n",
        "        if i % 1000 == 0:\n",
        "            print(\"Iteration: {0}\".format(i))\n",
        "\n",
        "    print(\"Iteration: {0}\".format(i))\n",
        "\n",
        "    return state_action_values, returns\n",
        "\n",
        "def action_value_prediction_main():\n",
        "    # 그리드 월드 환경 객체 생성\n",
        "    env = GridWorld(\n",
        "        height=GRID_HEIGHT,\n",
        "        width=GRID_WIDTH,\n",
        "        start_state=None,\n",
        "        terminal_states=TERMINAL_STATES,\n",
        "        transition_reward=-1.0,\n",
        "        terminal_reward=-1.0,\n",
        "        outward_reward=-1.0\n",
        "    )\n",
        "    env.reset()\n",
        "\n",
        "    state_action_values, returns = first_visit_mc_prediction(env, 1.0, 10000)\n",
        "    draw_grid_world_action_values_image(\n",
        "        state_action_values,\n",
        "        GRID_HEIGHT, GRID_WIDTH,\n",
        "        env.NUM_ACTIONS,\n",
        "        env.ACTION_SYMBOLS\n",
        "    )\n",
        "\n",
        "    state_action_values, returns = every_visit_mc_prediction(env, 1.0, 10000)\n",
        "    draw_grid_world_action_values_image(\n",
        "        state_action_values,\n",
        "        GRID_HEIGHT, GRID_WIDTH,\n",
        "        env.NUM_ACTIONS,\n",
        "        env.ACTION_SYMBOLS\n",
        "    )\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    action_value_prediction_main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "UxdLhxlMUKOJ",
        "outputId": "34c4fdcb-fac8-49b2-f2b5-4ebe98f2cc05"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration: 0\n",
            "Iteration: 1000\n",
            "Iteration: 2000\n",
            "Iteration: 3000\n",
            "Iteration: 4000\n",
            "Iteration: 5000\n",
            "Iteration: 6000\n",
            "Iteration: 7000\n",
            "Iteration: 8000\n",
            "Iteration: 9000\n",
            "Iteration: 9999\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration: 0\n",
            "Iteration: 1000\n",
            "Iteration: 2000\n",
            "Iteration: 3000\n",
            "Iteration: 4000\n",
            "Iteration: 5000\n",
            "Iteration: 6000\n",
            "Iteration: 7000\n",
            "Iteration: 8000\n",
            "Iteration: 9000\n",
            "Iteration: 9999\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "EPSILON = 0.1\n",
        "\n",
        "GRID_HEIGHT = 4\n",
        "GRID_WIDTH = 4\n",
        "TERMINAL_STATES = [(0, 0), (GRID_HEIGHT-1, GRID_WIDTH-1)]\n",
        "DISCOUNT_RATE = 1.0\n",
        "MAX_EPISODES = 100\n",
        "\n",
        "# 비어있는 행동 가치 테이블을 0으로 초기화하며 생성함\n",
        "def generate_initial_q_value_and_return(env):\n",
        "    state_action_values = np.zeros((GRID_HEIGHT, GRID_WIDTH, env.NUM_ACTIONS))\n",
        "    returns = dict()\n",
        "\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            for action in env.ACTIONS:\n",
        "                returns[((i, j), action)] = list()\n",
        "\n",
        "    return state_action_values, returns\n",
        "\n",
        "# 모든 상태에서 수행 가능한 행동에 맞춰 임의의 정책을 생성함\n",
        "# 초기에 각 행동의 선택 확률은 모두 같음\n",
        "def generate_initial_random_policy(env):\n",
        "    policy = dict()\n",
        "\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            actions = []\n",
        "            prob = []\n",
        "            for action in env.ACTIONS:\n",
        "                actions.append(action)\n",
        "                prob.append(0.25)\n",
        "            policy[(i, j)] = (actions, prob)\n",
        "\n",
        "    return policy\n",
        "\n",
        "# 환경에서 현재 정책에 입각하여 에피소드(현재 상태, 행동, 다음 상태, 보상) 생성\n",
        "def generate_episode(env, policy):\n",
        "    episode = []\n",
        "    visited_state_actions = []\n",
        "\n",
        "    state = env.reset()  # 초기 상태 고정 (0, 1)\n",
        "\n",
        "    done = False\n",
        "    while not done:\n",
        "        actions, prob = policy[state]\n",
        "        action = np.random.choice(actions, size=1, p=prob)[0]\n",
        "\n",
        "        next_state, reward, done, _ = env.step(action)\n",
        "\n",
        "        episode.append(((state, action), reward))\n",
        "        visited_state_actions.append((state, action))\n",
        "\n",
        "        state = next_state\n",
        "\n",
        "    return episode, visited_state_actions\n",
        "\n",
        "# 첫 방문 행동 가치 MC 추정 함수\n",
        "def first_visit_mc_prediction(\n",
        "    state_action_values, returns, episode, visited_state_actions):\n",
        "    G = 0\n",
        "    for idx, ((state, action), reward) in enumerate(reversed(episode)):\n",
        "        G = DISCOUNT_RATE * G + reward\n",
        "\n",
        "        value_prediction_conditions = [\n",
        "            (state, action) not in \\\n",
        "                visited_state_actions[:len(visited_state_actions) - idx - 1],\n",
        "            state not in TERMINAL_STATES\n",
        "        ]\n",
        "\n",
        "        if all(value_prediction_conditions):\n",
        "            returns[(state, action)].append(G)\n",
        "            state_action_values[state[0], state[1], action] \\\n",
        "                = np.mean(returns[(state, action)])\n",
        "\n",
        "# 소프트 탐욕적 정책 생성\n",
        "def generate_soft_greedy_policy(env, state_action_values, policy):\n",
        "    new_policy = dict()\n",
        "\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            actions = []\n",
        "            action_probs = []\n",
        "            if (i, j) in TERMINAL_STATES:\n",
        "                for action in env.ACTIONS:\n",
        "                    actions.append(action)\n",
        "                    action_probs.append(0.25)\n",
        "                new_policy[(i, j)] = (actions, action_probs)\n",
        "            else:\n",
        "                max_prob_actions = [action_ for action_, value_\n",
        "                                    in enumerate(state_action_values[i, j, :]) if\n",
        "                                    value_ == np.max(state_action_values[i, j, :])]\n",
        "                for action in env.ACTIONS:\n",
        "                    actions.append(action)\n",
        "                    if action in max_prob_actions:\n",
        "                        action_probs.append(\n",
        "                            (1 - EPSILON) / len(max_prob_actions) \\\n",
        "                            + EPSILON / env.NUM_ACTIONS\n",
        "                        )\n",
        "                    else:\n",
        "                        action_probs.append(\n",
        "                            EPSILON / env.NUM_ACTIONS\n",
        "                        )\n",
        "\n",
        "                new_policy[(i, j)] = (actions, action_probs)\n",
        "\n",
        "    error = 0.0\n",
        "    for i in range(GRID_HEIGHT):\n",
        "        for j in range(GRID_WIDTH):\n",
        "            error += np.sum(\n",
        "                np.absolute(\n",
        "                    np.array(policy[(i, j)][1]) - np.array(new_policy[(i, j)][1])\n",
        "                )\n",
        "            )\n",
        "\n",
        "    return new_policy, error\n",
        "\n",
        "def soft_policy_control_main():\n",
        "    # 그리드 월드 환경 객체 생성\n",
        "    env = GridWorld(\n",
        "        height=GRID_HEIGHT,\n",
        "        width=GRID_WIDTH,\n",
        "        start_state=(0, 1),       # 시작 상태 고정\n",
        "        terminal_states=TERMINAL_STATES,\n",
        "        transition_reward=-1.0,\n",
        "        terminal_reward=-1.0,\n",
        "        outward_reward=-1.0\n",
        "    )\n",
        "\n",
        "    # 비어있는 상태-가치 함수를 0으로 초기화하며 생성함\n",
        "    state_action_values, returns = generate_initial_q_value_and_return(env)\n",
        "\n",
        "    # 초기 임의 정책 생성\n",
        "    policy = generate_initial_random_policy(env)\n",
        "\n",
        "    iter_num = 0\n",
        "\n",
        "    print(\"[[[ MC 제어 반복 시작! ]]]\")\n",
        "    while iter_num < MAX_EPISODES:\n",
        "        iter_num += 1\n",
        "\n",
        "        episode, visited_state_actions = generate_episode(env, policy)\n",
        "        print(\"*** 에피소드 생성 완료 ***\")\n",
        "\n",
        "        first_visit_mc_prediction(\n",
        "            state_action_values, returns, episode, visited_state_actions\n",
        "        )\n",
        "        print(\"*** MC 예측 수행 완료 ***\")\n",
        "\n",
        "        policy, error = generate_soft_greedy_policy(\n",
        "            env, state_action_values, policy\n",
        "        )\n",
        "        print(\"*** 정책 개선 [에러 값: {0:9.7f}], 총 반복 수: {1} ***\\n\".format(\n",
        "            error, iter_num\n",
        "        ))\n",
        "\n",
        "    print(\"[[[ MC 제어 반복 종료! ]]]\\n\\n\")\n",
        "\n",
        "    draw_grid_world_optimal_policy_image(\n",
        "        policy,\n",
        "        GRID_HEIGHT, GRID_WIDTH,\n",
        "        env.ACTION_SYMBOLS\n",
        "    )\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    soft_policy_control_main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "59CFPhzQUNuH",
        "outputId": "2548713a-61de-4822-f8fb-b249e2126930"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[ MC 제어 반복 시작! ]]]\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.4500000], 총 반복 수: 1 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 18.4500000], 총 반복 수: 2 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 3 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 4 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 5 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 6 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 7 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 8 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 9 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 10 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 11 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 12 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 13 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 14 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 15 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 16 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 17 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 18 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 19 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 20 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 21 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 22 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 23 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 24 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 25 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 26 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 27 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 28 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 29 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 30 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 31 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 32 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 33 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 34 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 35 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 36 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 37 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 38 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 39 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 40 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 41 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 42 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 43 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 44 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 45 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 46 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 47 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 48 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 49 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 50 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 51 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 52 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 53 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 54 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 55 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 56 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 57 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 58 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.9000000], 총 반복 수: 59 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 60 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 61 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 62 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 63 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 64 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 65 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 66 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 67 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 68 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 69 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 70 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 71 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 72 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 73 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 74 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 75 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 76 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 77 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 78 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 79 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 80 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 81 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 82 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 83 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 84 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 85 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 86 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 87 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 88 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 89 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 90 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 91 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 92 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 93 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 94 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 95 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 96 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 97 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 98 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 99 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 100 ***\n",
            "\n",
            "[[[ MC 제어 반복 종료! ]]]\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import time\n",
        "\n",
        "# -------------------------------\n",
        "# T1 0 1 2 3 4 T2\n",
        "# -------------------------------\n",
        "\n",
        "\n",
        "class RandomWalk():\n",
        "    def __init__(\n",
        "            self,\n",
        "            num_internal_states=5,        # 종료 상태를 제외한 내부 상태 개수\n",
        "            transition_reward=0.0,        # 일반적인 상태 전이 보상\n",
        "            left_terminal_reward=0.0,     # 왼쪽 종료 상태로 이동하는 행동\n",
        "                                          # 수행 시 받는 보상\n",
        "            right_terminal_reward=1.0     # 오른쪽 종료 상태로 이동하는 행동\n",
        "                                          # 수행 시 받는 보상\n",
        "    ):\n",
        "        self.__version__ = \"0.0.1\"\n",
        "\n",
        "        self.num_internal_states = num_internal_states\n",
        "\n",
        "        self.num_states = num_internal_states + 2\n",
        "        self.STATES = [i for i in range(num_internal_states)]\n",
        "        self.TERMINAL_STATES = ['T1', 'T2']\n",
        "\n",
        "        # 모든 가능한 행동\n",
        "        self.ACTION_LEFT = 0\n",
        "        self.ACTION_RIGHT = 1\n",
        "        self.ACTION_SYMBOLS = [\"\\u2190\", \"\\u2192\"]\n",
        "\n",
        "        # 종료 상태를 제외한 임의의 상태에서 왼쪽 이동 또는 오른쪽 이동\n",
        "        self.ACTIONS = [\n",
        "            self.ACTION_LEFT,\n",
        "            self.ACTION_RIGHT\n",
        "        ]\n",
        "        self.NUM_ACTIONS = len(self.ACTIONS)\n",
        "\n",
        "        # 시작 상태 위치\n",
        "        self.START_STATE = self.STATES[int(num_internal_states / 2)]\n",
        "\n",
        "        self.transition_reward = transition_reward\n",
        "\n",
        "        self.left_terminal_reward = left_terminal_reward\n",
        "\n",
        "        self.right_terminal_reward = right_terminal_reward\n",
        "\n",
        "        self.current_state = None\n",
        "\n",
        "    def reset(self):\n",
        "        self.current_state = self.START_STATE\n",
        "        return self.current_state\n",
        "\n",
        "    def moveto(self, state):\n",
        "        self.current_state = state\n",
        "\n",
        "    def get_next_state(self, state, action):\n",
        "        if state in self.TERMINAL_STATES:\n",
        "            next_state = state\n",
        "        else:\n",
        "            if action == self.ACTION_LEFT:\n",
        "                if state == 0:\n",
        "                    next_state = 'T1'\n",
        "                else:\n",
        "                    next_state = state - 1\n",
        "            elif action == self.ACTION_RIGHT:\n",
        "                if state == self.num_internal_states - 1:\n",
        "                    next_state = 'T2'\n",
        "                else:\n",
        "                    next_state = state + 1\n",
        "            else:\n",
        "                raise ValueError()\n",
        "\n",
        "        return next_state\n",
        "\n",
        "    def get_reward(self, state, next_state):\n",
        "        if next_state == 'T1':\n",
        "            reward = self.left_terminal_reward\n",
        "        elif next_state == 'T2':\n",
        "            reward = self.right_terminal_reward\n",
        "        else:\n",
        "            reward = self.transition_reward\n",
        "\n",
        "        return reward\n",
        "\n",
        "    def get_state_action_probability(self, state, action):\n",
        "        next_state = self.get_next_state(state, action)\n",
        "\n",
        "        reward = self.get_reward(state, next_state)\n",
        "        prob = 1.0\n",
        "\n",
        "        return next_state, reward, prob\n",
        "\n",
        "    # take @action in @state\n",
        "    # @return: (reward, new state)\n",
        "    def step(self, action):\n",
        "        next_state = self.get_next_state(\n",
        "            state=self.current_state, action=action\n",
        "        )\n",
        "\n",
        "        reward = self.get_reward(self.current_state, next_state)\n",
        "\n",
        "        self.current_state = next_state\n",
        "\n",
        "        if self.current_state in self.TERMINAL_STATES:\n",
        "            done = True\n",
        "        else:\n",
        "            done = False\n",
        "\n",
        "        return next_state, reward, done, None\n",
        "\n",
        "    def render(self, mode='human'):\n",
        "        print(self.__str__(), end=\"\\n\\n\")\n",
        "\n",
        "    def get_random_action(self):\n",
        "        return random.choice(self.ACTIONS)\n",
        "\n",
        "    def __str__(self):\n",
        "        randomwalk_str = \"\"\n",
        "        randomwalk_str += \" T1 \" + \" \".join(\n",
        "            [\"{0}\".format(i) for i in range(self.num_internal_states)]\n",
        "        ) + \" T2\\n\"\n",
        "\n",
        "        if self.current_state in self.STATES:\n",
        "            blank = \"    \" + \"  \" * self.current_state\n",
        "        elif self.current_state == 'T1':\n",
        "            blank = \" \"\n",
        "        elif self.current_state == 'T2':\n",
        "            blank = \"  \" + \"  \" * (self.num_internal_states + 1)\n",
        "        else:\n",
        "            raise ValueError()\n",
        "\n",
        "        randomwalk_str += blank + \"*\"\n",
        "\n",
        "        return randomwalk_str\n",
        "\n",
        "# 랜덤워크 정책 이미지 산출 함수\n",
        "def draw_random_walk_policy_image(policy, env):\n",
        "    randomwalk_str = \"\"\n",
        "    randomwalk_str += \" T1      \" + \"       \".join(\n",
        "        [\"{0}\".format(i) for i in range(env.num_internal_states)]\n",
        "    ) + \"      T2\\n\"\n",
        "\n",
        "    randomwalk_str += \"       \"\n",
        "    for state in env.STATES:\n",
        "        actions, prob = policy[state]\n",
        "        randomwalk_str += \"{0}:{1:4}  \".format(\n",
        "            env.ACTION_SYMBOLS[env.ACTION_LEFT],\n",
        "            np.round(prob[env.ACTION_LEFT], decimals=2)\n",
        "        )\n",
        "    randomwalk_str += \"\\n\"\n",
        "\n",
        "    randomwalk_str += \"       \"\n",
        "    for state in env.STATES:\n",
        "        actions, prob = policy[state]\n",
        "        randomwalk_str += \"{0}:{1:4}  \".format(\n",
        "            env.ACTION_SYMBOLS[env.ACTION_RIGHT],\n",
        "            np.round(prob[env.ACTION_RIGHT], decimals=2)\n",
        "        )\n",
        "\n",
        "    print(randomwalk_str)"
      ],
      "metadata": {
        "id": "cLFc4mIdUQXB"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "DISCOUNT_RATE = 0.9\n",
        "MAX_EPISODES = 50\n",
        "EPSILON = 0.1\n",
        "\n",
        "# 비어있는 행동 가치 테이블을 0으로 초기화하며 생성함\n",
        "def generate_initial_q_value_and_return(env):\n",
        "    state_action_values = np.zeros((env.num_internal_states, env.NUM_ACTIONS))\n",
        "    returns = dict()\n",
        "\n",
        "    for state in env.STATES:\n",
        "        for action in env.ACTIONS:\n",
        "            returns[(state, action)] = list()\n",
        "\n",
        "    return state_action_values, returns\n",
        "\n",
        "# 모든 상태에서 수행 가능한 행동에 맞춰 임의의 정책을 생성함\n",
        "# 초기에 각 행동의 선택 확률은 모두 같음\n",
        "def generate_initial_random_policy(env):\n",
        "    policy = dict()\n",
        "\n",
        "    for state in env.STATES:\n",
        "        actions = []\n",
        "        prob = []\n",
        "        for action in env.ACTIONS:\n",
        "            actions.append(action)\n",
        "            prob.append(0.5)\n",
        "        policy[state] = (actions, prob)\n",
        "\n",
        "    return policy\n",
        "\n",
        "# 환경에서 현재 정책에 입각하여 에피소드(현재 상태, 행동, 다음 상태, 보상) 생성\n",
        "def generate_episode(env, policy):\n",
        "    episode = []\n",
        "    visited_state_actions = []\n",
        "\n",
        "    state = env.reset()  # exploring start\n",
        "\n",
        "    done = False\n",
        "    while not done:\n",
        "        actions, prob = policy[state]\n",
        "        action = np.random.choice(actions, size=1, p=prob)[0]\n",
        "        next_state, reward, done, _ = env.step(action)\n",
        "\n",
        "        episode.append(((state, action), reward))\n",
        "        visited_state_actions.append((state, action))\n",
        "\n",
        "        state = next_state\n",
        "\n",
        "    return episode, visited_state_actions\n",
        "\n",
        "# 첫 방문 행동 가치 MC 추정 함수\n",
        "def first_visit_mc_prediction(\n",
        "    state_action_values, returns, episode, visited_state_actions, env):\n",
        "    G = 0\n",
        "    for idx, ((state, action), reward) in enumerate(reversed(episode)):\n",
        "        G = DISCOUNT_RATE * G + reward\n",
        "\n",
        "        value_prediction_conditions = [\n",
        "            (state, action) not in \\\n",
        "                visited_state_actions[:len(visited_state_actions) - idx - 1],\n",
        "            state not in env.TERMINAL_STATES\n",
        "        ]\n",
        "\n",
        "        if all(value_prediction_conditions):\n",
        "            returns[(state, action)].append(G)\n",
        "            state_action_values[state, action] = np.mean(returns[(state, action)])\n",
        "\n",
        "# 소프트 탐욕적 정책 생성\n",
        "def generate_soft_greedy_policy(env, state_action_values, policy):\n",
        "    new_policy = dict()\n",
        "\n",
        "    for state in env.STATES:\n",
        "        actions = []\n",
        "        action_probs = []\n",
        "        if state in env.TERMINAL_STATES:\n",
        "            for action in range(env.NUM_ACTIONS):\n",
        "                actions.append(action)\n",
        "                action_probs.append(0.5)\n",
        "            new_policy[state] = (actions, action_probs)\n",
        "        else:\n",
        "            max_prob_actions = [action_ for action_, value_\n",
        "                                in enumerate(state_action_values[state, :]) if\n",
        "                                value_ == np.max(state_action_values[state, :])]\n",
        "            for action in range(env.NUM_ACTIONS):\n",
        "                actions.append(action)\n",
        "                if action in max_prob_actions:\n",
        "                    action_probs.append(\n",
        "                        (1 - EPSILON) / len(max_prob_actions) \\\n",
        "                        + EPSILON / env.NUM_ACTIONS\n",
        "                    )\n",
        "                else:\n",
        "                    action_probs.append(\n",
        "                        EPSILON / env.NUM_ACTIONS\n",
        "                    )\n",
        "\n",
        "            new_policy[state] = (actions, action_probs)\n",
        "\n",
        "    error = 0.0\n",
        "    for i in env.STATES:\n",
        "        error += np.sum(\n",
        "            np.absolute(\n",
        "                np.array(policy[i][1]) - np.array(new_policy[i][1])\n",
        "            )\n",
        "        )\n",
        "\n",
        "    return new_policy, error\n",
        "\n",
        "def random_walk_soft_policy_control_main():\n",
        "    # 랜덤 워크 환경 객체 생성\n",
        "    env = RandomWalk(\n",
        "        num_internal_states=5,\n",
        "        transition_reward=0.0,\n",
        "        left_terminal_reward=0.0,\n",
        "        right_terminal_reward=1.0\n",
        "    )\n",
        "\n",
        "    # 비어있는 상태-가치 함수를 0으로 초기화하며 생성함\n",
        "    state_action_values, returns = generate_initial_q_value_and_return(env)\n",
        "\n",
        "    # 초기 임의 정책 생성\n",
        "    policy = generate_initial_random_policy(env)\n",
        "\n",
        "    iter_num = 0\n",
        "\n",
        "    print(\"[[[ MC 제어 반복 시작! ]]]\")\n",
        "    while iter_num < MAX_EPISODES:\n",
        "        iter_num += 1\n",
        "\n",
        "        episode, visited_state_actions = generate_episode(env, policy)\n",
        "        print(\"*** 에피소드 생성 완료 ***\")\n",
        "\n",
        "        first_visit_mc_prediction(\n",
        "            state_action_values, returns, episode, visited_state_actions, env\n",
        "        )\n",
        "        print(\"*** MC 예측 수행 완료 ***\")\n",
        "\n",
        "        policy, error = generate_soft_greedy_policy(\n",
        "            env, state_action_values, policy\n",
        "        )\n",
        "        print(\"*** 정책 개선 [에러 값: {0:9.7f}], 총 반복 수: {1} ***\\n\".format(\n",
        "            error, iter_num\n",
        "        ))\n",
        "\n",
        "    print(\"[[[ MC 제어 반복 종료! ]]]\\n\\n\")\n",
        "\n",
        "    draw_random_walk_policy_image(policy, env)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    random_walk_soft_policy_control_main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q8iIjlyJURxy",
        "outputId": "9b71c666-bb33-4700-fbdb-e316f383a01a"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[ MC 제어 반복 시작! ]]]\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 1 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 2.7000000], 총 반복 수: 2 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 3 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 4 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 5 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 6 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 7 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 8 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 9 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 10 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 11 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 12 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 13 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 14 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 15 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 16 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 17 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 18 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 19 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 20 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 21 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.9000000], 총 반복 수: 22 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 23 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 24 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 25 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 26 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 27 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 28 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 29 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 30 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 31 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 32 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 33 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 34 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 35 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 36 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 37 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 38 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 39 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 40 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 41 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 42 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 43 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 44 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 45 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 46 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 47 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 48 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 49 ***\n",
            "\n",
            "*** 에피소드 생성 완료 ***\n",
            "*** MC 예측 수행 완료 ***\n",
            "*** 정책 개선 [에러 값: 0.0000000], 총 반복 수: 50 ***\n",
            "\n",
            "[[[ MC 제어 반복 종료! ]]]\n",
            "\n",
            "\n",
            " T1      0       1       2       3       4      T2\n",
            "       ←: 0.5  ←:0.05  ←:0.05  ←:0.05  ←:0.05  \n",
            "       →: 0.5  →:0.95  →:0.95  →:0.95  →:0.95  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Jm_ZJmlhUTA6"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}